(()=>{"use strict";var e={772:(e,n,t)=>{t.d(n,{Z:()=>a});var r=t(645),o=t.n(r)()((function(e){return e[1]}));o.push([e.id,"*, *:before, *:after {\n  margin: 0;\n  padding: 0;\n  -webkit-box-sizing: border-box;\n  -moz-box-sizing: border-box;\n  box-sizing: border-box;\n}\n\n.header {\n  padding: 15px 0;\n  border-bottom: 2px solid teal;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n.header__nav {\n  display: block;\n  padding: 5px 15px;\n  background-color: ghostwhite;\n  color: teal;\n  cursor: pointer;\n  transition: all 0.3s ease-in-out;\n}\n.header__nav:hover {\n  filter: drop-shadow(0 0 3px teal);\n}\n.header__nav:active {\n  color: ghostwhite;\n  background-color: teal;\n}\n.header__nav:not(:last-of-type) {\n  margin-right: 10px;\n}\n\n#root {\n  max-width: 1050px;\n  padding: 40px 25px 0;\n  margin: 0 auto;\n}\n\n.user {\n  max-width: 600px;\n  width: 100%;\n  padding: 10px 15px;\n  margin: 15px auto;\n  border: 1px solid teal;\n  border-radius: 20px;\n}\n.user * {\n  margin: 7px;\n}\n.user__title {\n  text-align: center;\n}\n.user__info {\n  font-size: 18px;\n}\n.user__controls {\n  display: flex;\n  justify-content: center;\n}\n.user__btn {\n  display: block;\n  padding: 5px 15px;\n  cursor: pointer;\n}\n",""]);const a=o},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t=e(n);return n[2]?"@media ".concat(n[2]," {").concat(t,"}"):t})).join("")},n.i=function(e,t,r){"string"==typeof e&&(e=[[null,e,""]]);var o={};if(r)for(var a=0;a<this.length;a++){var i=this[a][0];null!=i&&(o[i]=!0)}for(var s=0;s<e.length;s++){var c=[].concat(e[s]);r&&o[c[0]]||(t&&(c[2]?c[2]="".concat(t," and ").concat(c[2]):c[2]=t),n.push(c))}},n}},379:e=>{var n=[];function t(e){for(var t=-1,r=0;r<n.length;r++)if(n[r].identifier===e){t=r;break}return t}function r(e,r){for(var a={},i=[],s=0;s<e.length;s++){var c=e[s],u=r.base?c[0]+r.base:c[0],d=a[u]||0,l="".concat(u," ").concat(d);a[u]=d+1;var p=t(l),f={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==p)n[p].references++,n[p].updater(f);else{var v=o(f,r);r.byIndex=s,n.splice(s,0,{identifier:l,updater:v,references:1})}i.push(l)}return i}function o(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,o){var a=r(e=e||[],o=o||{});return function(e){e=e||[];for(var i=0;i<a.length;i++){var s=t(a[i]);n[s].references--}for(var c=r(e,o),u=0;u<a.length;u++){var d=t(a[u]);0===n[d].references&&(n[d].updater(),n.splice(d,1))}a=c}}},569:e=>{var n={};e.exports=function(e,t){var r=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},565:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},795:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),n.styleTagTransform(r,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}}},n={};function t(r){var o=n[r];if(void 0!==o)return o.exports;var a=n[r]={id:r,exports:{}};return e[r](a,a.exports,t),a.exports}t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),t.nc=void 0,(()=>{var e=t(379),n=t.n(e),r=t(795),o=t.n(r),a=t(569),i=t.n(a),s=t(565),c=t.n(s),u=t(216),d=t.n(u),l=t(589),p=t.n(l),f=t(772),v={};v.styleTagTransform=p(),v.setAttributes=c(),v.insert=i().bind(null,"head"),v.domAPI=o(),v.insertStyleElement=d(),n()(f.Z,v),f.Z&&f.Z.locals&&f.Z.locals;const m=e=>{localStorage.setItem("users",JSON.stringify(e))},h=()=>JSON.parse(localStorage.getItem("users")),g=e=>{const n=(e=>{let n="";return e.forEach((e=>n+=(e=>`<div class="user" id="user_${e.id}">\n      <h2 class="user__title">${e.username}</h2>\n      <p class="user__info">${e.name}</p>\n      <p class="user__info">${e.email}</p>\n      <div class="user__controls">\n        <button class="user__btn" type="button">Delete user</button>\n      </div>\n    </div>`)(e))),`<div>${n}</div>>`})(e);document.querySelector("#root").innerHTML=n},y=async(e=4,n="https://dog.ceo/api/breeds/image/random")=>{if(e<1)return;const t=await fetch(n);return t.ok?(await t.json()).message:y(e-1)};document.querySelector("#nav0").addEventListener("click",(()=>{document.querySelector("#root").innerHTML="<div>\n      <h3>Task 1</h3>\n      <p>Необходимо получить список всех пользователей с помощью бесплатного API\n        (https://jsonplaceholder.typicode.com/users) и отобразить их на странице. Пользователь должен иметь возможность\n        удалить любого пользователя из списка. Данные при получении необходимо сохранить в локальное хранилище браузера\n        localStorage. При удалении пользователь должен удаляться не только со страницы, но и из локального хранилища\n        localStorage</p>\n        <h3>Task 2</h3>\n      <p>Необходимо реализовать отрисовку 10 картинок собак из API https://dog.ceo/dog-api/ с интервалом в 3\n        секунды.</p>\n    </div>"})),document.querySelector("#nav1").addEventListener("click",(()=>{(async()=>{const e=await(async(e="https://jsonplaceholder.typicode.com/users")=>{const n=await fetch(e);return await n.json()})();m(e),g(e)})()})),document.querySelector("#nav2").addEventListener("click",(()=>{(()=>{document.querySelector("#root").innerHTML="";for(let e=0;e<10;e+=1)setTimeout((async()=>{const e=await y();var n;e&&(n=`<img src="${e}" alt="dog" width="200">`,document.querySelector("#root").insertAdjacentHTML("beforeend",n))}),3e3*e)})()})),document.querySelector("#root").addEventListener("click",(e=>{if(e.target instanceof HTMLButtonElement){const n=e.target;n.classList.contains("user__btn")&&((e=>{const n=h().filter((n=>+n.id!==e));m(n)})(+n.closest(".user").id.slice(5)),void g(h()))}}))})()})();